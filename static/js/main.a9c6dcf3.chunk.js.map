{"version":3,"sources":["Components/Tile.js","Components/Arena.js","Components/Header.js","data/Algorithms.js","data/PriorityQueue.js","data/Stack.js","data/Queue.js","Components/App.js","serviceWorker.js","index.js"],"names":["Tile","this","props","x","y","lit","visited","distance","neededSteps","type","movingStart","movingEnd","updateArenaTile","updateSpecial","handleMouseUp","movingState","visitState","litAnimation","visitAnimation","className","style","animation","onMouseDown","_","onMouseUp","onMouseEnter","React","Component","Arena","arena","width","height","mouseDown","startTile","endTile","endStartDistance","startedAlgorithm","gridTemplateRows","gridTemplateColumns","map","arr","tile","key","avisited","Header","state","dropDown","beginAlgorithm","resetAlgorithm","currentAlgorithm","updateAlgorithm","onClick","action","id","name","setState","st","calcDistance","x1","x2","y1","y2","a","b","Math","sqrt","PriorityQueue","items","elem","priority","qNode","QueueNode","isEmpty","push","length","i","splice","shift","Stack","data","top","element","pop","console","log","_reverse","index","Queue","rear","START_TILE","floor","END_TILE","App","arenaArr","undefined","currentMaze","foundEnd","Infinity","componentDidMount","dataArr","Array","fill","j","curTile","forEach","adjacent","algorithm","maze","beginDijkstra","beginAStar","beginDFS","beginBFS","beginEller","beginDFSMaze","generateNewRow","first","val","wallUp","wallRight","wallDown","wallLeft","set","generateNewRowInts","randomMergeRow","row","mergeProb","random","spawnNewRow","topRow","retRow","curNum","group","chance","max","matrix","curRow","cur","next","lastRow","path","curStep","s","randStart","neighbor","far","queue","enqueue","q","dequeue","triggerVisualizePath","distances","trace","pq","tileKey","curNode","curDistance","endKey","startKey","lastStep","reverse","f","g","h","closed","curG","gScore","abs","tStr","split","sorted","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a9c6dcf3.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/Tile.css';\r\n\r\nconst visitDelay = 0.001;\r\n\r\nclass Tile extends React.Component {\r\n    render() {\r\n        let { x, y, lit, visited, distance, neededSteps, type, movingStart, movingEnd, updateArenaTile, updateSpecial, handleMouseUp } = this.props;\r\n\r\n        let movingState = (type === \"START\" && movingStart) || (type === \"END\" && movingEnd) ? ' moving forwards' : '';\r\n        let litState = lit && !(type === \"END\" || type === \"START\");\r\n        let visitState = visited && !(type === \"END\" || type === \"START\");\r\n\r\n        let litAnimation = litState ? `.1s light-up linear ${distance * 0.001 + neededSteps * 0.0035}s forwards, ` : '';\r\n        let visitAnimation = visitState ? `1.5s visited linear ${distance * 3 * visitDelay}s forwards` : '';\r\n        // keep this as ${endStartDistance * delay * visitDelay} for some cool effects\r\n\r\n        return (\r\n            <div className={type + ' tile-container ' + movingState + 'tile'+ '-' + x + '-' + y}\r\n                style={{\r\n                    animation: litAnimation + visitAnimation,\r\n                }}\r\n                onMouseDown={_ => updateSpecial(x, y, type)}\r\n                onMouseUp={_ => handleMouseUp()}\r\n                onMouseEnter={_ => updateArenaTile(x, y, type)} />\r\n        );\r\n    }\r\n}\r\n\r\nTile.propTypes = {};\r\n\r\nexport default Tile;\r\n\r\n\r\n","import React from 'react';\r\nimport '../css/Arena.css';\r\nimport Tile from '../Components/Tile';\r\n\r\nclass Arena extends React.Component {\r\n    render() {\r\n\r\n        let { arena, width, height, mouseDown, \r\n            movingStart, movingEnd, updateSpecial, handleMouseUp,\r\n            updateArenaTile, startTile, endTile, \r\n            endStartDistance, startedAlgorithm, neededSteps } = this.props;\r\n\r\n        return (\r\n            <div className=\"arena-container\"\r\n                style={{ gridTemplateRows: `repeat(${height}, 1fr)`, gridTemplateColumns: `repeat(${width}, 1fr)` }}>\r\n                {arena ? arena.map((arr, y) => arr.map((tile, x) => {\r\n                    return <Tile\r\n                        key={x + ',' + y}\r\n                        x={x}\r\n                        y={y}\r\n                        width={width}\r\n                        height={height}\r\n                        endStartDistance={endStartDistance}\r\n                        startTile={startTile}\r\n                        endTile={endTile}\r\n                        distance={tile.distance}\r\n                        lit={tile.lit}\r\n                        visited={tile.avisited}\r\n                        type={tile.type}\r\n                        handleMouseUp={handleMouseUp}\r\n                        updateArenaTile={updateArenaTile}\r\n                        updateSpecial={updateSpecial}\r\n                        mouseDown={mouseDown}\r\n                        movingStart={movingStart}\r\n                        movingEnd={movingEnd}\r\n                        neededSteps={neededSteps}\r\n                    />\r\n                }))\r\n                    : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nArena.propTypes = {};\r\n\r\nexport default Arena;\r\n","import React from 'react';\r\nimport { Dropdown } from 'semantic-ui-react';\r\nimport '../css/Header.css';\r\n\r\nclass Header extends React.Component {\r\n\r\n    state = {\r\n        dropDown: false\r\n    }\r\n\r\n    render() {\r\n        let { beginAlgorithm, resetAlgorithm, startedAlgorithm, currentAlgorithm, updateAlgorithm } = this.props;\r\n        let { dropDown } = this.state;\r\n        let maze = currentAlgorithm == \"ELLER\" || currentAlgorithm == \"DFSMAZE\";\r\n\r\n        return (\r\n            <div className=\"header-container\">\r\n                <div className=\"btn-begin-algorithm\" onClick={_ => !startedAlgorithm ? beginAlgorithm() : resetAlgorithm()}>\r\n                    {!startedAlgorithm ? `Visualize ${currentAlgorithm}` : 'Reset'}\r\n                </div>\r\n                <div action=\"#\" className=\"algorithm-form\">\r\n                    <div id=\"algorithms\" name=\"cars\" onClick={() => this.setState(st => ({ dropDown: !st.dropDown }))}>\r\n                        {currentAlgorithm}\r\n                        {this.state.dropDown ?\r\n                            <div className=\"algorithm-opt-container\">\r\n                                <div className=\"algorithm-opt\" onClick={_ => updateAlgorithm('DIJKSTRAS')} > Dijkstras </div>\r\n                                <div className=\"algorithm-opt\" onClick={_ => updateAlgorithm('ASTAR')} > AStar </div>\r\n                                <div className=\"algorithm-opt\" onClick={_ => updateAlgorithm('DFS')} > Depth First Search </div>\r\n                                <div className=\"algorithm-opt\" onClick={_ => updateAlgorithm('BFS')} > Breadth First Search Maze </div>\r\n                                <div className=\"algorithm-opt\" onClick={_ => updateAlgorithm('ELLER')} > Eller's Maze </div>\r\n                                <div className=\"algorithm-opt\" onClick={_ => updateAlgorithm('DFSMAZE')} > Depth First Search Maze </div>\r\n                            </div> : null}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","let calcDistance = (x1, x2, y1, y2) => {\r\n    let a = x1 - x2;\r\n    let b = y1 - y2;\r\n\r\n    let c = Math.sqrt(a*a + b*b);\r\n    return c;\r\n}\r\n\r\nexport { calcDistance }","export default class PriorityQueue {\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n\r\n    enqueue(elem, priority) {\r\n        let qNode = new QueueNode(elem, priority);\r\n\r\n        if (this.isEmpty()) {\r\n            this.items.push(qNode);\r\n            return;\r\n        }\r\n\r\n        if (this.items[this.items.length - 1].priority <= qNode.priority) {\r\n            this.items.push(qNode);\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            if (this.items[i].priority > qNode.priority) {\r\n                this.items.splice(i, 0, qNode);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    rear() {\r\n        if (this.isEmpty()) {\r\n            return \"Empty Queue\";\r\n        }\r\n        return this.items[this.items.length - 1];\r\n    }\r\n\r\n    front() {\r\n        if (this.isEmpty()) {\r\n            return \"Empty Queue\";\r\n        }\r\n\r\n        return this.items[0];\r\n    }\r\n\r\n    // returns the zeroth element in my list (shortest weight)\r\n    dequeue() {\r\n        if (this.isEmpty()) {\r\n            return 'Empty Queue';\r\n        }\r\n        return this.items.shift();\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.items.length === 0;\r\n    }\r\n\r\n    print() {\r\n        return this.items.map(i => i.elem.y + ' ' + i.elem.x);\r\n    }\r\n}\r\n\r\nclass QueueNode {\r\n    constructor(elem, priority) {\r\n        this.elem = elem;\r\n        this.priority = priority;\r\n    }\r\n}","\r\nexport default class Stack {\r\n    constructor() {\r\n        this.data = [];\r\n        this.top = 0;\r\n    }\r\n    push(element) {\r\n        this.data[this.top] = element;\r\n        this.top = this.top + 1;\r\n    }\r\n    length() {\r\n        return this.top;\r\n    }\r\n    peek() {\r\n        return this.data[this.top - 1];\r\n    }\r\n    isEmpty() {\r\n        return this.top === 0;\r\n    }\r\n    pop() {\r\n        if (this.isEmpty() === false) {\r\n            this.top = this.top - 1;\r\n            return this.data.pop(); // removes the last element\r\n        }\r\n    }\r\n    print() {\r\n        var top = this.top - 1; // because top points to index where new    element to be inserted\r\n        while (top >= 0) { // print upto 0th index\r\n            console.log(this.data[top]);\r\n            top--;\r\n        }\r\n    }\r\n    reverse() {\r\n        this._reverse(this.top - 1);\r\n    }\r\n    _reverse(index) {\r\n        if (index != 0) {\r\n            this._reverse(index - 1);\r\n        }\r\n        console.log(this.data[index]);\r\n    }\r\n}","export default class Queue {\r\n\r\n    constructor() {\r\n\r\n        this.data = [];\r\n        this.rear = 0;\r\n    }\r\n\r\n    enqueue(element) {\r\n        this.data[this.rear] = element;\r\n        this.rear = this.rear + 1;\r\n    }\r\n    length() {\r\n\r\n        return this.rear;\r\n    }\r\n    isEmpty() {\r\n\r\n        return this.rear === 0;\r\n    }\r\n    getFront() {\r\n\r\n        if (this.isEmpty() === false) {\r\n            return this.data[0];\r\n        }\r\n    }\r\n    getLast() {\r\n\r\n        if (this.isEmpty() === false) {\r\n\r\n            return this.data[this.rear - 1];\r\n        }\r\n    }\r\n    dequeue() {\r\n\r\n        if (this.isEmpty() === false) {\r\n\r\n            this.rear = this.rear - 1;\r\n            return this.data.shift();\r\n        }\r\n    }\r\n    print() {\r\n        for (let i = 0; i < this.rear; i++) {\r\n            console.log(this.data[i]);\r\n        }\r\n    }\r\n    clear() {\r\n        this.data.length = 0;\r\n        this.rear = 0;\r\n    }\r\n}","import React from 'react';\r\nimport Arena from './Arena';\r\nimport Header from './Header';\r\n\r\nimport { calcDistance } from '../data/Algorithms';\r\n\r\nimport PriorityQueue from '../data/PriorityQueue';\r\nimport Stack from '../data/Stack';\r\nimport Queue from '../data/Queue';\r\n\r\n// import algorithms from '../data/Algorithms';\r\n\r\nconst width = 60; //make this 2x height\r\nconst height = 30;\r\nconst START_TILE = { x: Math.floor(width / 4), y: Math.floor(height / 2) };\r\nconst END_TILE = { x: Math.floor(width * 3 / 4), y: Math.floor(height / 2) };\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        arenaArr: null,\r\n        mouseDown: false,\r\n        startTile: undefined,\r\n        endTile: undefined,\r\n        movingStart: false,\r\n        movingEnd: false,\r\n        currentMaze: 'DFSMAZE',\r\n        currentAlgorithm: 'DFSMAZE', // add an early termination version and a populate weights version\r\n        startedAlgorithm: false,\r\n        foundEnd: false,\r\n        endStartDistance: Infinity,\r\n        neededSteps: 0\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        let dataArr = new Array(height).fill(0).map(_ => new Array(width).fill(0));\r\n\r\n        let startTile;\r\n        let endTile;\r\n\r\n        for (let i = 0; i < dataArr.length; i++) {\r\n            for (let j = 0; j < dataArr[i].length; j++) {\r\n\r\n                let curTile = new Tile(\"REG\", j, i);\r\n\r\n                if (i === START_TILE.y && j === START_TILE.x) {\r\n                    curTile.type = \"START\";\r\n                    startTile = curTile;\r\n                }\r\n\r\n                if (i === END_TILE.y && j === END_TILE.x) {\r\n                    curTile.type = \"END\";\r\n                    endTile = curTile;\r\n                }\r\n\r\n                dataArr[i][j] = curTile;\r\n            }\r\n        }\r\n\r\n        dataArr.forEach((arr, y) => arr.forEach((tile, x) => {\r\n            if (y > 0) tile.adjacent.push(dataArr[y - 1][x]);\r\n            if (x < width - 1) tile.adjacent.push(dataArr[y][x + 1]);\r\n            if (y < height - 1) tile.adjacent.push(dataArr[y + 1][x]);\r\n            if (x > 0) tile.adjacent.push(dataArr[y][x - 1]);\r\n        }))\r\n\r\n        this.setState({\r\n            arenaArr: dataArr,\r\n            startTile,\r\n            endTile\r\n        });\r\n    }\r\n\r\n    updateAlgorithm = (algorithm) => {\r\n        this.setState({ currentAlgorithm: algorithm })\r\n    }\r\n\r\n    handleMouseUp = () => {\r\n        this.setState({ mouseDown: false })\r\n    }\r\n\r\n    //optimize this so it iterates through all in chunks\r\n    updateArenaTile = (x, y) => {\r\n        let { arenaArr, mouseDown, movingStart, movingEnd, startTile, endTile } = this.state;\r\n        if (!mouseDown || movingStart || movingEnd) return;\r\n        if ((x === startTile.x && y === startTile.y) || (x === endTile.x && y === endTile.y)) return;\r\n\r\n        arenaArr[y][x].lit = false;\r\n        arenaArr[y][x].visited = false;\r\n        arenaArr[y][x].type = arenaArr[y][x].type === \"WALL\" ? \"REG\" : \"WALL\";\r\n        this.setState({ arenaArr: arenaArr });\r\n    }\r\n\r\n    updateSpecial = (x, y, type) => {\r\n        if (type === \"REG\") {\r\n            if (this.state.movingStart === true) {\r\n                let { arenaArr, startTile, endTile } = this.state;\r\n                arenaArr[startTile.y][startTile.x].type = \"REG\";\r\n                arenaArr[y][x].type = \"START\";\r\n                this.setState({ startTile: arenaArr[y][x], movingStart: false, endStartDistance: calcDistance(x, endTile.x, y, endTile.y) });\r\n                return;\r\n            }\r\n            if (this.state.movingEnd === true) {\r\n                let { arenaArr, startTile, endTile } = this.state;\r\n                arenaArr[endTile.y][endTile.x].type = \"REG\";\r\n                arenaArr[y][x].type = \"END\";\r\n                this.setState({ endTile: arenaArr[y][x], movingEnd: false, endStartDistance: calcDistance(x, startTile.x, y, startTile.y) });\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (type === \"START\") {\r\n            this.setState({ movingStart: true });\r\n        }\r\n\r\n        if (type === \"END\") {\r\n            this.setState({ movingEnd: true });\r\n        }\r\n    }\r\n\r\n    resetAlgorithm = (maze) => {\r\n        let { arenaArr } = this.state;\r\n\r\n        arenaArr.forEach(arr => arr.forEach(tile => {\r\n            tile.lit = false;\r\n            tile.avisited = false;\r\n            tile.type = maze && tile.type == \"WALL\" ? \"REG\" : tile.type \r\n        }));\r\n\r\n        this.setState({ startedAlgorithm: false })\r\n    }\r\n\r\n    beginAlgorithm = () => {\r\n\r\n        let { currentAlgorithm, startTile } = this.state;\r\n\r\n        this.setState({ startedAlgorithm: true });\r\n\r\n        switch (currentAlgorithm) {\r\n            case \"DIJKSTRAS\":\r\n                this.beginDijkstra();\r\n                break;\r\n            case \"ASTAR\":\r\n                this.beginAStar();\r\n                break;\r\n            case \"DFS\":\r\n                this.beginDFS(startTile);\r\n                break;\r\n            case \"BFS\":\r\n                this.beginBFS(startTile);\r\n                break;\r\n            case \"ELLER\":\r\n                this.beginEller();\r\n                break;\r\n            case \"DFSMAZE\":\r\n                this.beginDFSMaze();\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    generateNewRow = (first) => {\r\n        return new Array(Math.floor(width / 2) - 1).fill(0).map((val, i) => {\r\n            return { wallUp: true, wallRight: i === Math.floor(width / 2) - 2, wallDown: false, wallLeft: i == 0, set: first ? i : null }\r\n        });\r\n    }\r\n\r\n    generateNewRowInts = (first) => {\r\n        return new Array(Math.floor(width / 2) - 1).fill(0).map((val, i) => {\r\n            return first ? i : null;\r\n        });\r\n    }\r\n\r\n    randomMergeRow = (row, mergeProb) => {\r\n        for (let i = 0; i < row.length - i; i++) {\r\n            let rand = Math.random() < mergeProb;\r\n            if (rand) {\r\n                row[i] = row[i + 1];\r\n            }\r\n        }\r\n\r\n        return row;\r\n    }\r\n\r\n    spawnNewRow = (topRow) => {\r\n        let retRow = new Array(topRow.length).fill(null);\r\n\r\n        let curNum = topRow[0];\r\n        let group = [0]; //stores indices of same numbers\r\n\r\n        for (let i = 0; i < topRow.length - 1; i++) {\r\n            let top = topRow[i];\r\n            if (curNum != top) {\r\n                //take my group, pick some points and shove it into retRow at indices\r\n                if (group.length === 1) {\r\n                    retRow[i] = top;\r\n                    curNum = topRow[i + 1];\r\n                    group = [i + 1];\r\n                    continue;\r\n                }\r\n\r\n                let atLeastOne = group[Math.random() * group.length];\r\n                retRow[atLeastOne] = top;\r\n\r\n                let chance = Math.max(0.3, (group.length / 10));\r\n                for (let j = 0; j < group.length; j++) {\r\n                    let rand = Math.random() < chance;\r\n                    if (rand) {\r\n                        retRow[group[j]] = top;\r\n                    }\r\n                }\r\n            }\r\n            group.push(top);\r\n\r\n\r\n        }\r\n    }\r\n\r\n    beginEller = () => {\r\n        let { arenaArr, startTile, endTile } = this.state;\r\n        let matrix = [];\r\n\r\n        let max = Math.floor(width / 2) - 1; // make a max-row\r\n\r\n        let curRow = this.generateNewRowInts(true);\r\n        curRow = this.randomMergeRow(curRow, 0.5);\r\n\r\n        console.log(curRow);\r\n\r\n        for (let i = 0; i < curRow.length - 1; i++) {\r\n            let cur = curRow[i];\r\n            let next = curRow[i + 1];\r\n            let rand = Math.random() < 0.5;\r\n\r\n            if (rand && cur.set !== next.set) {\r\n                next.set = cur.set;\r\n            }\r\n        }\r\n        matrix.push(curRow);\r\n        while (matrix.length < 20) {\r\n            curRow = this.generateNewRow();\r\n            let lastRow = matrix[matrix.length - 1];\r\n            let firstInSet = true;\r\n            let curSet = lastRow[0].set;\r\n            for (let i = 1; i < lastRow.length; i++) {\r\n                let prev = lastRow[i];\r\n                let cur = curRow[i];\r\n                if (firstInSet) {\r\n\r\n                }\r\n                let rand = Math.random() < 0.5;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    // =====================+\r\n\r\n    // MAZE GENERATION ALGORITHMS \r\n    /*\r\n        1. DFS\r\n        2. Eller's\r\n    */\r\n    // =====================+\r\n\r\n    beginDFSMaze = () => {\r\n        let { arenaArr, startTile, endTile } = this.state;\r\n\r\n        let path = [];\r\n\r\n        arenaArr.forEach(arr => arr.forEach(tile => {\r\n            if (tile.type == \"REG\") {\r\n                tile.type = \"WALL\";\r\n            }\r\n        }));\r\n\r\n        let st = new Stack();\r\n        startTile.avisited = true;\r\n        st.push(startTile);\r\n        let curStep = 0;\r\n\r\n        while (!st.isEmpty()) {\r\n            let s = st.pop();\r\n            path.push(s.y + \" \" + s.x);\r\n\r\n            if (s.x == endTile.x && s.y == endTile.y) {\r\n                break;\r\n            }\r\n\r\n            s.distance = curStep;\r\n            curStep += 5;\r\n            // s.avisited = true;\r\n\r\n            let randStart = Math.floor(Math.random() * s.adjacent.length);\r\n            let neighbor;\r\n            let far;\r\n\r\n            for (let i = randStart; i < randStart + s.adjacent.length - 1; i++) {\r\n                neighbor = s.adjacent[i % s.adjacent.length];\r\n                far = neighbor.adjacent[i % neighbor.adjacent.length];\r\n                if (far.avisited || neighbor.avisited || neighbor.type !== \"WALL\" || far.type == \"REG\") continue;\r\n                st.push(s);\r\n                neighbor.type = \"REG\";\r\n                // neighbor.avisited = true;\r\n                // far.avisited = true;\r\n                if (far.type == \"WALL\") {\r\n                    far.type = \"REG\";\r\n                }\r\n                st.push(far)\r\n                break;\r\n            }\r\n        }\r\n\r\n        // this.triggerVisualizePath(path);\r\n    }\r\n\r\n\r\n    beginEller = () => {\r\n        let { arenaArr, startTile, endTile } = this.state;\r\n        let matrix = [];\r\n\r\n        let max = Math.floor(width / 2) - 1; // make a max-row\r\n\r\n        let curRow = this.generateNewRowInts(true);\r\n        curRow = this.randomMergeRow(curRow, 0.5);\r\n\r\n        console.log(curRow);\r\n\r\n        for (let i = 0; i < curRow.length - 1; i++) {\r\n            let cur = curRow[i];\r\n            let next = curRow[i + 1];\r\n            let rand = Math.random() < 0.5;\r\n\r\n            if (rand && cur.set !== next.set) {\r\n                next.set = cur.set;\r\n            }\r\n        }\r\n        matrix.push(curRow);\r\n        while (matrix.length < 20) {\r\n            curRow = this.generateNewRow();\r\n            let lastRow = matrix[matrix.length - 1];\r\n            let firstInSet = true;\r\n            let curSet = lastRow[0].set;\r\n            for (let i = 1; i < lastRow.length; i++) {\r\n                let prev = lastRow[i];\r\n                let cur = curRow[i];\r\n                if (firstInSet) {\r\n\r\n                }\r\n                let rand = Math.random() < 0.5;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // =====================+\r\n\r\n    // PATHFINDING ALGORITHMS \r\n    /*\r\n        1. dijkstras, \r\n        2. DFS, BFS\r\n        3. a* \r\n    */\r\n    // =====================+\r\n\r\n    beginBFS = () => {\r\n        let { startTile, endTile } = this.state;\r\n\r\n        let path = [];\r\n\r\n        let queue = new Queue();\r\n        queue.enqueue(startTile);\r\n        let curStep = 0;\r\n\r\n        while (!queue.isEmpty()) {\r\n            let q = queue.dequeue();\r\n\r\n            if (q.x == endTile.x && q.y == endTile.y) {\r\n                break;\r\n            }\r\n\r\n            if (q.avisited) continue;\r\n\r\n            q.distance = curStep;\r\n            curStep += 5;\r\n            q.avisited = true;\r\n\r\n            q.adjacent.forEach(neighbor => {\r\n                if (neighbor.avisited || neighbor.type == \"WALL\") return;\r\n                queue.enqueue(neighbor);\r\n                path.push(q.y + \" \" + q.x);\r\n            })\r\n        }\r\n\r\n        this.triggerVisualizePath(path);\r\n    }\r\n\r\n    beginDFS = () => {\r\n        let { startTile, endTile } = this.state;\r\n\r\n        let path = [];\r\n\r\n        let st = new Stack();\r\n        st.push(startTile);\r\n        let curStep = 0;\r\n\r\n        while (!st.isEmpty()) {\r\n            let s = st.pop();\r\n            path.push(s.y + \" \" + s.x);\r\n\r\n            if (s.x == endTile.x && s.y == endTile.y) {\r\n                break;\r\n            }\r\n\r\n            if (s.avisited) continue;\r\n\r\n            s.distance = curStep;\r\n            curStep += 5;\r\n            s.avisited = true;\r\n\r\n            s.adjacent.forEach(neighbor => {\r\n                if (neighbor.avisited || neighbor.type == \"WALL\") return;\r\n                st.push(neighbor);\r\n            })\r\n        }\r\n\r\n        console.log(path);\r\n\r\n        this.triggerVisualizePath(path);\r\n    }\r\n\r\n    beginDijkstra = () => {\r\n        let { arenaArr, startTile, endTile } = this.state;\r\n\r\n        let distances = {};\r\n        let trace = {};\r\n        let pq = new PriorityQueue();\r\n\r\n        arenaArr.forEach(arr => arr.forEach(tile => {\r\n            if (tile !== startTile) {\r\n                let tileKey = tile.y + ' ' + tile.x;\r\n                tile.lit = false;\r\n                distances[tileKey] = Infinity;\r\n            }\r\n        }));\r\n\r\n        startTile.avisited = true;\r\n        startTile.distance = 0;\r\n        distances[startTile.y + ' ' + startTile.x] = 0;\r\n\r\n        pq.enqueue(startTile, 0);\r\n\r\n        // let foundEnd = false; adding this foundEnd condition makes the graph look a lot less interesting :P\r\n        let foundEnd = false;\r\n\r\n        let curStep = 0;\r\n        while (!pq.isEmpty()) {\r\n            let curNode = pq.dequeue().elem;\r\n\r\n            if (curNode.y === endTile.y && curNode.x === endTile.x) {\r\n                this.setState({ neededSteps: curStep });\r\n                break;\r\n            }\r\n\r\n            let curDistance = distances[curNode.y + ' ' + curNode.x];\r\n            curNode.adjacent.forEach(neighbor => {\r\n                if (neighbor.type == \"WALL\") return;\r\n                if (!neighbor.avisited) {\r\n                    neighbor.avisited = true;\r\n                    let alt = curDistance + 1;\r\n                    if (alt < distances[neighbor.y + ' ' + neighbor.x]) {\r\n                        distances[neighbor.y + ' ' + neighbor.x] = curDistance + 1;\r\n                        trace[neighbor.y + ' ' + neighbor.x] = curNode.y + ' ' + curNode.x;\r\n                        neighbor.distance = curStep;\r\n                        curStep++;\r\n                        pq.enqueue(neighbor, curDistance + 1)\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        let endKey = endTile.y + ' ' + endTile.x;\r\n        let startKey = startTile.y + ' ' + startTile.x;\r\n\r\n        let path = [];\r\n        let lastStep = endKey;\r\n\r\n        while (lastStep !== startKey) {\r\n            path.push(lastStep);\r\n            lastStep = trace[lastStep];\r\n        }\r\n\r\n        this.setState({ endStartDistance: path.length - 1 })\r\n\r\n        path = path.reverse();\r\n        return this.triggerVisualizePath(path);\r\n    }\r\n\r\n    beginAStar = async () => {\r\n        let { arenaArr, startTile, endTile } = this.state;\r\n\r\n        let trace = {};\r\n        let pq = new PriorityQueue();\r\n\r\n        arenaArr.forEach(arr => arr.forEach(tile => {\r\n            if (tile !== startTile) {\r\n                tile.lit = false;\r\n                tile.f = 0;\r\n                tile.g = 0;\r\n                tile.h = 0;\r\n                tile.closed = false;\r\n            }\r\n        }));\r\n\r\n        trace[startTile.y + ' ' + startTile.x] = 0;\r\n        pq.enqueue(startTile, 0);\r\n        startTile.avisited = true;\r\n        let curStep = 0;\r\n\r\n        while (!pq.isEmpty()) {\r\n            let curNode = pq.dequeue().elem;\r\n            curNode.closed = true;\r\n            let curG = curNode.g;\r\n\r\n            if (curNode.y === endTile.y && curNode.x === endTile.x) {\r\n                this.setState({ neededSteps: curStep });\r\n                break;\r\n            }\r\n\r\n            curNode.adjacent.forEach(neighbor => {\r\n                if (neighbor.type === \"WALL\" || neighbor.closed) return;\r\n                let gScore = curG + 1;\r\n                let wasVisited = neighbor.avisited;\r\n                if (!wasVisited || gScore < neighbor.g) {\r\n                    neighbor.avisited = true;\r\n                    trace[neighbor.y + ' ' + neighbor.x] = curNode.y + ' ' + curNode.x;\r\n                    neighbor.h = Math.abs(endTile.y - neighbor.y) + Math.abs(endTile.x - neighbor.x);\r\n                    neighbor.g = gScore;\r\n                    neighbor.f = neighbor.g + neighbor.h;\r\n                    neighbor.distance = curStep;\r\n                    curStep++;\r\n                    pq.enqueue(neighbor, neighbor.f);\r\n                }\r\n            })\r\n        }\r\n\r\n        let endKey = endTile.y + ' ' + endTile.x;\r\n        let startKey = startTile.y + ' ' + startTile.x;\r\n\r\n        let path = [];\r\n        let lastStep = endKey;\r\n\r\n        while (lastStep !== startKey) {\r\n            path.push(lastStep);\r\n            lastStep = trace[lastStep];\r\n        }\r\n\r\n        this.triggerVisualizePath(path);\r\n    }\r\n\r\n    triggerVisualizePath = (path) => {\r\n        let { arenaArr } = this.state;\r\n        for (let i = 0; i < path.length; i++) {\r\n            let str = path[i];\r\n            let tStr = str.split(' ');\r\n            arenaArr[tStr[0]][tStr[1]].lit = true;\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { arenaArr, mouseDown, movingStart, movingEnd, startTile, neededSteps, endTile, updateAlgorithm, currentAlgorithm, endStartDistance, startedAlgorithm } = this.state;\r\n\r\n        return (\r\n            <div onMouseDown={_ => this.setState({ mouseDown: true })}\r\n                onMouseUp={_ => this.setState({ mouseDown: false })} >\r\n                <Header beginAlgorithm={this.beginAlgorithm}\r\n                    resetAlgorithm={this.resetAlgorithm}\r\n                    startedAlgorithm={startedAlgorithm}\r\n                    currentAlgorithm={currentAlgorithm}\r\n                    updateAlgorithm={this.updateAlgorithm}\r\n                />\r\n                <Arena startedAlgorithm={startedAlgorithm}\r\n                    arena={arenaArr}\r\n                    startTile={startTile}\r\n                    endTile={endTile}\r\n                    width={width}\r\n                    height={height}\r\n                    mouseDown={mouseDown}\r\n                    handleMouseUp={this.handleMouseUp}\r\n                    updateArenaTile={this.updateArenaTile}\r\n                    updateSpecial={this.updateSpecial}\r\n                    movingStart={movingStart}\r\n                    movingEnd={movingEnd}\r\n                    endStartDistance={endStartDistance}\r\n                    neededSteps={neededSteps}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Tile {\r\n\r\n    constructor(type, x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.avisited = false;\r\n        this.distance = null;\r\n        this.adjacent = [];\r\n        this.type = type;\r\n        this.lit = false;\r\n        this.f = 0;\r\n        this.g = 0;\r\n        this.h = 0;\r\n        this.closed = false;\r\n    }\r\n\r\n    type() {\r\n        return this.type;\r\n    }\r\n\r\n    lit() {\r\n        return this.lit;\r\n    }\r\n\r\n    visited() {\r\n        return this.avisited;\r\n    }\r\n\r\n    isSorted() {\r\n        return this.sorted;\r\n    }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}